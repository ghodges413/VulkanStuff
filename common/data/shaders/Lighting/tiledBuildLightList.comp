 #version 450
 
/*
==========================================
Uniforms
==========================================
*/

struct buildLightTileParms_t {
	mat4 matView;
	mat4 matProjInv;

	int screenWidth;
	int screenHeight;
	int maxLights;
	int pad0;
};
layout( binding = 0 ) uniform uboParms {
    buildLightTileParms_t parms;
} uniformParms;

/*
==========================================
Storage Images
==========================================
*/

//layout( binding = 3 ) uniform readonly image2D textureDepth;
layout( binding = 1 ) uniform sampler2D textureDepth;

/*
==========================================
Storage Buffers
==========================================
*/

struct pointLight_t {
	vec4 mSphere;	// xyz = position, w = radius, these are in world space coordinates
	vec4 mColor;	// rgb = color, a = intensity
};
layout( std430, binding = 2 ) buffer bufferLights {
	pointLight_t pointLights[];
};

const int gMaxLightsPerTile = 125;
struct lightList_t {
	int mNumLights;
	float m_depthMin;
	float m_depthMax;
	int mLightIds[ gMaxLightsPerTile ];
};
layout( std430, binding = 3 ) buffer bufferLightList {
	lightList_t lightLists[];
};



/*
==========================================
Layout
==========================================
*/

#define WORK_GROUP_SIZE 16

layout ( local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1 ) in;

/*
==========================================
Shared
==========================================
*/

#define MAX_UNSIGNED_INT 0xFFFFFFFF
#define MAX_INT 0x7FFFFFFF

// This shares memory between the threads in the current workgroup
// Initialization of shared variables is not allowed on declaration
shared uint minDepth;//		= MAX_INT;
shared uint maxDepth;//		= 0;

/*
 =======================
 IsPointInBox
 =======================
 */
bool IsPointInBox( in vec3 point, in vec3 boundsMin, in vec3 boundsMax ) {
	if ( point.x > boundsMax.x || point.x < boundsMin.x ) {
		return false;
	}
	if ( point.y > boundsMax.y || point.y < boundsMin.y ) {
		return false;
	}
	if ( point.z > boundsMax.z || point.z < boundsMin.z ) {
		return false;
	}
	
	return true;
}

/*
 ==========================
 main
 ==========================
 */
void main() {
	const int threadsPerWorkGroup = WORK_GROUP_SIZE * WORK_GROUP_SIZE;
	
	int threadID = int( gl_LocalInvocationID.x + gl_LocalInvocationID.y * WORK_GROUP_SIZE );
	int numGroupsWide = ( uniformParms.parms.screenWidth + WORK_GROUP_SIZE - 1 ) / WORK_GROUP_SIZE;
	int tileID = int( gl_WorkGroupID.x + gl_WorkGroupID.y * numGroupsWide );

	lightLists[ tileID ].mNumLights = 0;	// Reset the number of lights to zero

	//
	// Initialize the shared variables
	//
	
	minDepth		= MAX_INT;
	maxDepth		= 0;
	barrier();
	
	//
	//	Determine the min/max depth values of this tile
	//
	
	//gl_LocalInvocationID
	//gl_WorkGroupID
	ivec2 storePos	= ivec2( gl_GlobalInvocationID.xy );
	vec2 st			= ( vec2( gl_GlobalInvocationID.xy ) + vec2( 0.5 ) ) / vec2( uniformParms.parms.screenWidth, uniformParms.parms.screenHeight );
	
	float depth	= texture( textureDepth, st ).r;
	
	uint uDepth = uint( depth * MAX_INT );

	atomicMin( minDepth, uDepth );
	atomicMax( maxDepth, uDepth );
	
	// Block until all threads finish the above code
	barrier();
	
	//
	//	Build the bounds of this tile
	//

	// Map the depths to 0,1 normalized device coordinates
//	float minDepthZ			= 0.0;//2.0 * float( minDepth ) / float( MAX_INT ) - 1.0;
//	float maxDepthZ			= 1.0;//2.0 * float( maxDepth ) / float( MAX_INT ) - 1.0;
	float minDepthZ			= float( minDepth ) / float( MAX_INT );// - 1.0;
	float maxDepthZ			= float( maxDepth ) / float( MAX_INT );// - 1.0;
	
	// Map the integer coordinates to -1,1 normalized device coordinates
	const float numGroupsX	= float( uniformParms.parms.screenWidth ) / float( WORK_GROUP_SIZE );
	const float xWidth		= float( WORK_GROUP_SIZE ) / float( uniformParms.parms.screenWidth );
	float x					= 2.0 * ( float( gl_WorkGroupID.x ) + 0.5 ) / numGroupsX - 1.0;	// map from 0,1 to -1,1
	float xmin				= x - xWidth;
	float xmax				= x + xWidth;
	
	// Map the integer coordinates to -1,1 normalized device coordinates
	const float numGroupsY	= float( uniformParms.parms.screenHeight ) / float( WORK_GROUP_SIZE );
	const float yWidth		= float( WORK_GROUP_SIZE ) / float( uniformParms.parms.screenHeight );
	float y					= 2.0 * ( float( gl_WorkGroupID.y ) + 0.5 ) / numGroupsY - 1.0;	// map from 0,1 to -1,1
	float ymin				= y - yWidth;
	float ymax				= y + yWidth;
	
	// Calculate bounds in -1,1 normalized device coordinates
	vec3 boundsMin	= vec3( xmin, ymin, minDepthZ );
	vec3 boundsMax	= vec3( xmax, ymax, maxDepthZ );
	
	// Transform the bounds from NDC to view space
	vec4 mins	= uniformParms.parms.matProjInv * vec4( boundsMin, 1.0 );
	vec4 maxs	= uniformParms.parms.matProjInv * vec4( boundsMax, 1.0 );
	
	boundsMin	= mins.xyz / mins.w;
	boundsMax	= maxs.xyz / maxs.w;

	// Hack fix for ensuring the bounds aren't backwards
	vec3 center	= 0.5 * ( boundsMin + boundsMax );
	vec3 diff	= 0.5 * abs( boundsMax - boundsMin );

	boundsMin	= center - diff;
	boundsMax	= center + diff;

	// Convert the bounding box to a bounding sphere
	//vec4 boundsSphere = vec4( center.xyz, length( diff ) );

	lightLists[ tileID ].m_depthMin = minDepthZ;
	lightLists[ tileID ].m_depthMax = maxDepthZ;
	
	//
	//	Determine the lights that intersect with this tile
	//
	for ( int i = threadID; i < uniformParms.parms.maxLights; i += threadsPerWorkGroup ) {
		vec4 lightPointViewSpace	= uniformParms.parms.matView * vec4( pointLights[ i ].mSphere.xyz, 1.0 );
		vec4 lightSphere			= vec4( lightPointViewSpace.xyz, pointLights[ i ].mSphere.w );

		// Skip this light if the tile is not intersecting the sphere
		if ( false == IsPointInBox( lightSphere.xyz, boundsMin - vec3( lightSphere.w ), boundsMax + vec3( lightSphere.w ) ) ) {
			continue;
		}
		
		int id = atomicAdd( lightLists[ tileID ].mNumLights, 1 );
		if ( id >= gMaxLightsPerTile ) {
			break;
		}
		
		lightLists[ tileID ].mLightIds[ id ] = i;
	}
 }
 
 