#version 450
//#extension GL_GOOGLE_include_directive : enable

//#include "FFTTwiddles.comp"


#define PI				3.141592653589793
#define INV_ROOT2		0.70710678118654752440084436210485
#define COS_PIOVER8		0.92387953251128675612818318939679
#define COS_3PIOVER8	0.3826834323650897717284599840304
#define COS_PIOVER16	0.98078528040323044912618223613424
#define COS_3PIOVER16	0.83146961230254523707878837761791
#define COS_5PIOVER16	0.55557023301960222474283081394853
#define COS_7PIOVER16	0.19509032201612826784828486847702

/*
==========================
Complex
==========================
*/
vec2 Complex( in float angle ) {
	vec2 c;
	c.x = cos( angle );
	c.y = sin( angle );
	return c;
}

/*
==========================
ComplexMultiply
==========================
*/
vec2 ComplexMultiply( in vec2 a, in vec2 b ) {
	vec2 c;
	c.x = a.x * b.x - a.y * b.y;
	c.y = a.x * b.y + a.y * b.x;
	return c;
}

/*
 ==========================
 FFT2
 ==========================
 */
void FFT2( inout vec2 a, inout vec2 b ) {
	vec2 tmp = a;
	
	a = a + b;
	b = tmp - b;
}

/*
 ==========================
 FFT4
 ==========================
 */
void FFT4( inout vec2 data[ 4 ] ) {
	vec2 d0 = data[ 0 ];
	vec2 d1 = data[ 1 ];
	vec2 d2 = data[ 2 ];
	vec2 d3 = data[ 3 ];
	
	vec2 jd1 = vec2( -d1.y, d1.x );
	vec2 jd3 = vec2( -d3.y, d3.x );
	
	//vec2 jd1 = ComplexMultiply( vec2( 0.0, 1.0 ), d1 );
	//vec2 jd3 = ComplexMultiply( vec2( 0.0, 1.0 ), d3 );
	
	data[ 0 ] = ( d0 +  d1 + d2 +  d3 );
	data[ 2 ] = ( d0 - jd1 - d2 + jd3 );
	data[ 1 ] = ( d0 -  d1 + d2 -  d3 );
	data[ 3 ] = ( d0 + jd1 - d2 - jd3 );
}

/*
 ==========================
 FFT4_alt
 ==========================
 */
void FFT4_alt( inout vec2 d0, inout vec2 d1, inout vec2 d2, inout vec2 d3 ) {
	// FFT on columns
	FFT2( d0, d2 );
	FFT2( d1, d3 );
	
	// Twiddles
	d3 = vec2( d3.y, -d3.x );
	
	// FFT on rows
	FFT2( d0, d1 );
	FFT2( d2, d3 );
	
	// Transpose
	vec2 tmp = d1;
	d1 = d2;
	d2 = tmp;
}

/*
 ==========================
 FFT4_inv
 ==========================
 */
void FFT4_inv( inout vec2 d0, inout vec2 d1, inout vec2 d2, inout vec2 d3 ) {
	// FFT on columns
	FFT2( d0, d2 );
	FFT2( d1, d3 );
	
	// Twiddles
	d3 = vec2( -d3.y, d3.x );
	
	// FFT on rows
	FFT2( d0, d1 );
	FFT2( d2, d3 );
	
	// Transpose
	vec2 tmp = d1;
	d1 = d2;
	d2 = tmp;
}

/*
 ==========================
 FFT8
 ==========================
 */
void FFT8( inout vec2 data[ 8 ] ) {
	vec2 d0 = data[ 0 ];
	vec2 d1 = data[ 1 ];
	vec2 d2 = data[ 2 ];
	vec2 d3 = data[ 3 ];
	vec2 d4 = data[ 4 ];
	vec2 d5 = data[ 5 ];
	vec2 d6 = data[ 6 ];
	vec2 d7 = data[ 7 ];
	
	vec2 jd1 = vec2( -d1.y, d1.x );
	vec2 wd1 = ComplexMultiply( vec2( INV_ROOT2, INV_ROOT2 ), d1 );
	vec2 md1 = ComplexMultiply( vec2( INV_ROOT2, -INV_ROOT2 ), d1 );
	
	vec2 jd2 = vec2( -d2.y, d2.x );
	
	vec2 jd3 = vec2( -d3.y, d3.x );
	vec2 wd3 = ComplexMultiply( vec2( INV_ROOT2, INV_ROOT2 ), d3 );
	vec2 md3 = ComplexMultiply( vec2( INV_ROOT2, -INV_ROOT2 ), d3 );
	
	vec2 jd5 = vec2( -d5.y, d5.x );
	vec2 wd5 = ComplexMultiply( vec2( INV_ROOT2, INV_ROOT2 ), d5 );
	vec2 md5 = ComplexMultiply( vec2( INV_ROOT2, -INV_ROOT2 ), d5 );
	
	vec2 jd6 = vec2( -d6.y, d6.x );
	
	vec2 jd7 = vec2( -d7.y, d7.x );
	vec2 wd7 = ComplexMultiply( vec2( INV_ROOT2, INV_ROOT2 ), d7 );
	vec2 md7 = ComplexMultiply( vec2( INV_ROOT2, -INV_ROOT2 ), d7 );

	data[ 0 ] = d0 +  d1 +  d2 +  d3 + d4 +  d5 +  d6 +  d7;
	data[ 1 ] = d0 + md1 - jd2 - wd3 - d4 - md5 + jd6 + wd7;
	data[ 2 ] = d0 - jd1 -  d2 + jd3 + d4 - jd5 -  d6 + jd7;
	data[ 3 ] = d0 - wd1 + jd2 + md3 - d4 + wd5 - jd6 - md7;
	data[ 4 ] = d0 -  d1 +  d2 -  d3 + d4 -  d5 +  d6 -  d7;
	data[ 5 ] = d0 - md1 - jd2 + wd3 - d4 + md5 + jd6 - wd7;
	data[ 6 ] = d0 + jd1 -  d2 - jd3 + d4 + jd5 -  d6 - jd7;
	data[ 7 ] = d0 + wd1 + jd2 - md3 - d4 - wd5 - jd6 + md7;
}

/*
 ==========================
 FFT8_alt
 ==========================
 */
void FFT8_alt( inout vec2 d0, inout vec2 d1, inout vec2 d2, inout vec2 d3, inout vec2 d4, inout vec2 d5, inout vec2 d6, inout vec2 d7 ) {
	// FFT on columns
	FFT4_alt( d0, d2, d4, d6 );
	FFT4_alt( d1, d3, d5, d7 );
	
	// Twiddles
	d3 = ComplexMultiply( d3, vec2( INV_ROOT2, -INV_ROOT2 ) );
	d5 = vec2( d5.y, -d5.x );
	d7 = ComplexMultiply( d7, vec2( -INV_ROOT2, -INV_ROOT2 ) );
	
	// FFT on rows
	FFT2( d0, d1 );
	FFT2( d2, d3 );
	FFT2( d4, d5 );
	FFT2( d6, d7 );
	
	// Transpose
	vec2 tmpA;
	vec2 tmpB;
	
	tmpA = d4;
	d4 = d1;
	tmpB = d2;
	d2 = tmpA;
	d1 = tmpB;
	
	tmpA = d3;
	d3 = d6;
	tmpB = d5;
	d5 = tmpA;
	d6 = tmpB;
}

/*
 ==========================
 FFT8_inv
 ==========================
 */
void FFT8_inv( inout vec2 d0, inout vec2 d1, inout vec2 d2, inout vec2 d3, inout vec2 d4, inout vec2 d5, inout vec2 d6, inout vec2 d7 ) {
	// FFT on columns
	FFT4_inv( d0, d2, d4, d6 );
	FFT4_inv( d1, d3, d5, d7 );
	
	// Twiddles
	d3 = ComplexMultiply( d3, vec2( INV_ROOT2, INV_ROOT2 ) );
	d5 = vec2( -d5.y, d5.x );
	d7 = ComplexMultiply( d7, vec2( -INV_ROOT2, INV_ROOT2 ) );
	
	// FFT on rows
	FFT2( d0, d1 );
	FFT2( d2, d3 );
	FFT2( d4, d5 );
	FFT2( d6, d7 );
	
	// Transpose
	vec2 tmpA;
	vec2 tmpB;
	
	tmpA = d4;
	d4 = d1;
	tmpB = d2;
	d2 = tmpA;
	d1 = tmpB;
	
	tmpA = d3;
	d3 = d6;
	tmpB = d5;
	d5 = tmpA;
	d6 = tmpB;
}

/*
 ==========================
 FFT16
 ==========================
 */
void FFT16( inout vec2 data[ 16 ] ) {
	// FFT on columns
	FFT4_alt( data[ 0 ], data[ 4 ], data[ 8 ], data[ 12 ] );
	FFT4_alt( data[ 1 ], data[ 5 ], data[ 9 ], data[ 13 ] );
	FFT4_alt( data[ 2 ], data[ 6 ], data[ 10], data[ 14 ] );
	FFT4_alt( data[ 3 ], data[ 7 ], data[ 11], data[ 15 ] );
	
	// Twiddles
	data[ 5 ] = ComplexMultiply( data[ 5 ], vec2( COS_PIOVER8, -COS_3PIOVER8 ) );
	data[ 6 ] = ComplexMultiply( data[ 6 ], vec2( INV_ROOT2, -INV_ROOT2 ) );
	data[ 7 ] = ComplexMultiply( data[ 7 ], vec2( COS_3PIOVER8, -COS_PIOVER8 ) );
	
	data[ 9 ] = ComplexMultiply( data[ 9 ], vec2( INV_ROOT2, -INV_ROOT2 ) );
	data[ 10] = vec2( data[ 10].y, -data[ 10].x );
	data[ 11] = ComplexMultiply( data[ 11], vec2( -INV_ROOT2, -INV_ROOT2 ) );
	
	data[ 13] = ComplexMultiply( data[ 13], vec2( COS_3PIOVER8, -COS_PIOVER8 ) );
	data[ 14] = ComplexMultiply( data[ 14], vec2( -INV_ROOT2, -INV_ROOT2 ) );
	data[ 15] = ComplexMultiply( data[ 15], vec2( -COS_PIOVER8, COS_3PIOVER8 ) );
	
	// FFT on rows
	FFT4_alt( data[ 0 ], data[ 1 ], data[ 2 ], data[ 3 ] );
	FFT4_alt( data[ 4 ], data[ 5 ], data[ 6 ], data[ 7 ] );
	FFT4_alt( data[ 8 ], data[ 9 ], data[ 10], data[ 11] );
	FFT4_alt( data[ 12], data[ 13], data[ 14], data[ 15] );
	
	// Transpose
	vec2 tmp;
	
	tmp = data[ 1 ];
	data[ 1 ] = data[ 4 ];
	data[ 4 ] = tmp;
	
	tmp = data[ 2 ];
	data[ 2 ] = data[ 8 ];
	data[ 8 ] = tmp;
	
	tmp = data[ 3 ];
	data[ 3 ] = data[ 12];
	data[ 12] = tmp;
	
	tmp = data[ 6 ];
	data[ 6 ] = data[ 9 ];
	data[ 9 ] = tmp;
	
	tmp = data[ 7 ];
	data[ 7 ] = data[ 13];
	data[ 13] = tmp;
	
	tmp = data[ 11 ];
	data[ 11 ] = data[ 14 ];
	data[ 14 ] = tmp;
}

/*
 ==========================
 FFT16_inv
 ==========================
 */
void FFT16_inv( inout vec2 data[ 16 ] ) {
	// FFT on columns
	FFT4_inv( data[ 0 ], data[ 4 ], data[ 8 ], data[ 12 ] );
	FFT4_inv( data[ 1 ], data[ 5 ], data[ 9 ], data[ 13 ] );
	FFT4_inv( data[ 2 ], data[ 6 ], data[ 10], data[ 14 ] );
	FFT4_inv( data[ 3 ], data[ 7 ], data[ 11], data[ 15 ] );
	
	// Twiddles
	data[ 5 ] = ComplexMultiply( data[ 5 ], vec2( COS_PIOVER8, COS_3PIOVER8 ) );
	data[ 6 ] = ComplexMultiply( data[ 6 ], vec2( INV_ROOT2, INV_ROOT2 ) );
	data[ 7 ] = ComplexMultiply( data[ 7 ], vec2( COS_3PIOVER8, COS_PIOVER8 ) );
	
	data[ 9 ] = ComplexMultiply( data[ 9 ], vec2( INV_ROOT2, INV_ROOT2 ) );
	data[ 10] = vec2( -data[ 10].y, data[ 10].x );
	data[ 11] = ComplexMultiply( data[ 11], vec2( -INV_ROOT2, INV_ROOT2 ) );
	
	data[ 13] = ComplexMultiply( data[ 13], vec2( COS_3PIOVER8, COS_PIOVER8 ) );
	data[ 14] = ComplexMultiply( data[ 14], vec2( -INV_ROOT2, INV_ROOT2 ) );
	data[ 15] = ComplexMultiply( data[ 15], vec2( -COS_PIOVER8, -COS_3PIOVER8 ) );
	
	// FFT on rows
	FFT4_inv( data[ 0 ], data[ 1 ], data[ 2 ], data[ 3 ] );
	FFT4_inv( data[ 4 ], data[ 5 ], data[ 6 ], data[ 7 ] );
	FFT4_inv( data[ 8 ], data[ 9 ], data[ 10], data[ 11] );
	FFT4_inv( data[ 12], data[ 13], data[ 14], data[ 15] );
	
	// Transpose
	vec2 tmp;
	
	tmp = data[ 1 ];
	data[ 1 ] = data[ 4 ];
	data[ 4 ] = tmp;
	
	tmp = data[ 2 ];
	data[ 2 ] = data[ 8 ];
	data[ 8 ] = tmp;
	
	tmp = data[ 3 ];
	data[ 3 ] = data[ 12];
	data[ 12] = tmp;
	
	tmp = data[ 6 ];
	data[ 6 ] = data[ 9 ];
	data[ 9 ] = tmp;
	
	tmp = data[ 7 ];
	data[ 7 ] = data[ 13];
	data[ 13] = tmp;
	
	tmp = data[ 11 ];
	data[ 11 ] = data[ 14 ];
	data[ 14 ] = tmp;
}














#define WORK_GROUP_SIZE 64
layout ( local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

layout( binding = 0, rg32f ) uniform readonly image2D sourceTex;
layout ( binding = 1 ) uniform writeonly image2D destTex;

shared vec2 groupData[ 1024 ];

/*
 ==========================
 main
 ==========================
 */
void main() {
	//gl_LocalInvocationID
	//gl_WorkGroupID
	
	int N1 = 16;
	int N2 = 16;
	int thread_id = int( gl_GlobalInvocationID.x );
	
	int rowOffset = thread_id / N2;
	int threadID = thread_id % N2;
	
	int groupID = ( thread_id % 64 ) / 16;
	int groupOffset = 256 * groupID;
	
	vec2 data[ 16 ];
	
	int n2 = threadID;
	
	//
	//	FFT on columns
	//
	{
		for ( int n1 = 0; n1 < N1; n1++ ) {
			data[ n1 ] = imageLoad( sourceTex, ivec2( ( n1 * N2 ) + n2, rowOffset ) ).xy;
		}
		
		FFT16( data );
		
		// store data
		for ( int n1 = 0; n1 < N1; n1++ ) {
			groupData[ ( n1 * N2 ) + n2 + groupOffset ] = data[ n1 ];
		}
	}
	
	//memoryBarrier();
	groupMemoryBarrier();
	
	//
	//	FFT on rows
	//
	{
		for ( int n1 = 0; n1 < N1; n1++ ) {
			data[ n1 ] = groupData[ n1 + ( n2 * N1 ) + groupOffset ];
		}
		
		// Twiddles
		float angle = -2.0 * PI * float( n2 ) / float( N1 * N2 );
		for ( int n1 = 1; n1 < N1; n1++ ) {
			vec2 c = Complex( float( n1 ) * angle );
			data[ n1 ] = ComplexMultiply( data[ n1 ], c );
		}
		
		FFT16( data );
		
		// store data
		for ( int n1 = 0; n1 < N1; n1++ ) {
			imageStore( destTex, ivec2( ( n1 * N2 ) + n2, rowOffset ), vec4( data[ n1 ].x, data[ n1 ].y, 0.0, 1.0 ) );
		}
	}
}


 
 