#version 450
#include "FFTTwiddles.csh"

#define WORK_GROUP_SIZE 128
layout ( local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

layout( binding = 0, rg32f ) uniform readonly image2D sourceTex;
layout ( binding = 1 ) uniform writeonly image2D destTex;

uniform int N;
uniform int Ns;
uniform int K_W;

/*
– N = Number of complex input points
– gId = Global ID of a work item
– gSize = Global work size (Total number of work items)
– Idout = Output index of each work item
– Ns = Parameter that defines output index
– K_W = Kernel Size
*/

/*
 ==========================
 main
 ==========================
 */
void main() {
	//gl_LocalInvocationID
	//gl_WorkGroupID
	int width = N / 8;
	int height = N;
	int thread_id = int( gl_GlobalInvocationID.x );

	// We might be running more threads than we have data, don't run the program on phantom data
//	if ( thread_id >= N * N / 8 ) {
//		return;
//	}
	
	int rowOffset = int( thread_id / width );
	int gId = thread_id % ( width );
	int gSize = N / 8;
	int pageOffset = 0;

	if ( rowOffset >= 2 * N ) {
		rowOffset %= N;
		pageOffset = 2 * N;
	} else if ( rowOffset >= N ) {
		rowOffset %= N;
		pageOffset = N;
	}
	
	vec2 data[ 8 ];

	int idxIn = gId + pageOffset;
	data[ 0 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 0 * gSize ) + idxIn ) ).xy;
	data[ 1 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 1 * gSize ) + idxIn ) ).xy;
	data[ 2 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 2 * gSize ) + idxIn ) ).xy;
	data[ 3 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 3 * gSize ) + idxIn ) ).xy;
	data[ 4 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 4 * gSize ) + idxIn ) ).xy;
	data[ 5 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 5 * gSize ) + idxIn ) ).xy;
	data[ 6 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 6 * gSize ) + idxIn ) ).xy;
	data[ 7 ] = imageLoad( sourceTex, ivec2( rowOffset, ( 7 * gSize ) + idxIn ) ).xy;

	if ( Ns != 1 ) {
		//float angle = -2.0 * PI * float( gId ) / float( N );
		float angle = -2.0 * PI * ( gId % Ns ) / ( Ns * K_W );

		//data[ 0 ] = ComplexMultiply( data[ 0 ], Complex( 0.0 * angle ) ); // pointless to actually run this, as it has zero effect on the input/output
		data[ 1 ] = ComplexMultiply( data[ 1 ], Complex( 1.0 * angle ) );
		data[ 2 ] = ComplexMultiply( data[ 2 ], Complex( 2.0 * angle ) );
		data[ 3 ] = ComplexMultiply( data[ 3 ], Complex( 3.0 * angle ) );
		data[ 4 ] = ComplexMultiply( data[ 4 ], Complex( 4.0 * angle ) );
		data[ 5 ] = ComplexMultiply( data[ 5 ], Complex( 5.0 * angle ) );
		data[ 6 ] = ComplexMultiply( data[ 6 ], Complex( 6.0 * angle ) );
		data[ 7 ] = ComplexMultiply( data[ 7 ], Complex( 7.0 * angle ) );
	}

	// Maths
	FFT8( data );
	
	int Idout = ( gId / Ns ) * Ns * K_W + ( gId % Ns ) + pageOffset;
	imageStore( destTex, ivec2( rowOffset, ( 0 * Ns ) + Idout ), vec4( data[ 0 ].x, data[ 0 ].y, 0.0, 1.0 ) );
	imageStore( destTex, ivec2( rowOffset, ( 1 * Ns ) + Idout ), vec4( data[ 1 ].x, data[ 1 ].y, 0.0, 1.0 ) );
	imageStore( destTex, ivec2( rowOffset, ( 2 * Ns ) + Idout ), vec4( data[ 2 ].x, data[ 2 ].y, 0.0, 1.0 ) );
	imageStore( destTex, ivec2( rowOffset, ( 3 * Ns ) + Idout ), vec4( data[ 3 ].x, data[ 3 ].y, 0.0, 1.0 ) );
	imageStore( destTex, ivec2( rowOffset, ( 4 * Ns ) + Idout ), vec4( data[ 4 ].x, data[ 4 ].y, 0.0, 1.0 ) );
	imageStore( destTex, ivec2( rowOffset, ( 5 * Ns ) + Idout ), vec4( data[ 5 ].x, data[ 5 ].y, 0.0, 1.0 ) );
	imageStore( destTex, ivec2( rowOffset, ( 6 * Ns ) + Idout ), vec4( data[ 6 ].x, data[ 6 ].y, 0.0, 1.0 ) );
	imageStore( destTex, ivec2( rowOffset, ( 7 * Ns ) + Idout ), vec4( data[ 7 ].x, data[ 7 ].y, 0.0, 1.0 ) );
}


 
 