#version 460
#extension GL_NV_ray_tracing : require

layout( binding = 0, set = 0 ) uniform accelerationStructureNV topLevelAS;
layout( binding = 1, set = 0, rgba8 ) uniform image2D image;
layout( binding = 2, set = 0, rgba16f ) uniform image2D imagePos;
layout( binding = 3, set = 0, rgba16f ) uniform image2D imageNorms;
layout( binding = 4, set = 0 ) uniform CameraProperties 
{
	mat4 view;
	mat4 proj;
} cam;

layout( push_constant ) uniform frameCount {
  uint count;
} PushConstant;


struct record_t {
	vec4 pos;
	vec4 norm;
	vec4 color;
};
layout( location = 0 ) rayPayloadNV record_t hitValue;


uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}


// Generates a seed for a random number generator from 2 inputs plus a backoff
// https://github.com/nvpro-samples/optix_prime_baking/blob/master/random.h
// https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm
uint InitRandomSeed(uint val0, uint val1)
{
	uint v0 = val0, v1 = val1, s0 = 0;

	//[[unroll]] 
	for (uint n = 0; n < 16; n++)
	{
		s0 += 0x9e3779b9;
		v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
		v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
	}

	return v0;
}

uint RandomInt(inout uint seed)
{
	// LCG values from Numerical Recipes
    return (seed = 1664525 * seed + 1013904223);
}

float RandomFloat(inout uint seed)
{
	// Float version using bitmask from Numerical Recipes
	const uint one = 0x3f800000;
	const uint msk = 0x007fffff;
	return uintBitsToFloat(one | (msk & (RandomInt(seed) >> 9))) - 1;
}

vec2 RandomInUnitDisk(inout uint seed)
{
	for (;;)
	{
		const vec2 p = 2 * vec2(RandomFloat(seed), RandomFloat(seed)) - 1;
		if (dot(p, p) < 1)
		{
			return p;
		}
	}
}

vec3 RandomInUnitSphere(inout uint seed)
{
	for (;;)
	{
		const vec3 p = 2 * vec3(RandomFloat(seed), RandomFloat(seed), RandomFloat(seed)) - 1;
		if (dot(p, p) < 1 && dot( p, p ) > 0.00001 )
		{
			return p;
		}
	}
}


/*
==========================================
main
==========================================
*/
void main() {
	uint seed = InitRandomSeed( gl_LaunchIDNV.x, gl_LaunchIDNV.y );
	seed = wang_hash( seed + PushConstant.count );
	
	vec2 pixelCenter = vec2( gl_LaunchIDNV.xy ) + vec2( 0.5 );
	//pixelCenter += RandomInUnitDisk( seed ) * 0.5;
	const vec2 inUV = pixelCenter / vec2( gl_LaunchSizeNV.xy );
	vec2 d = inUV * 2.0 - 1.0;

	mat4 viewInverse = inverse( cam.view );
	mat4 projInverse = inverse( cam.proj );
	vec4 origin = viewInverse * vec4( 0, 0, 0, 1 );
	vec4 target = projInverse * vec4( d.x, -d.y, 1, 1 );
	vec4 direction = viewInverse * vec4( normalize( target.xyz / target.w ), 0 );

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	uint sbtRecordOffset = 0;
	uint sbtRecordStride = 0;
	uint missIndex = 0;
	float tmin = 0.001;
	float tmax = 10000.0;
	const int payload = 0;
	
	vec3 rayStart = origin.xyz;
	vec3 rayDir = direction.xyz;

	traceNV( topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, rayStart.xyz, tmin, rayDir.xyz, tmax, payload );
	
	// If we hit the sky then just store that color and early out
	if ( hitValue.color.a < 0.0 ) {
		vec4 skyColor;
		skyColor.r = hitValue.color.r;
		skyColor.g = hitValue.color.g;
		skyColor.b = hitValue.color.b;
		skyColor.a = 1.0;
		//skyColor.rgb = vec3( 0 );
		imageStore( image, ivec2( gl_LaunchIDNV.xy ), skyColor );
		return;
	}
	
	vec3 position = hitValue.pos.xyz;
	vec3 normal = hitValue.norm.xyz;
	vec3 diffuseColor = hitValue.color.rgb;
	vec3 lightDir = normalize( vec3( 1, 1, 1 ) );
	//vec3 sunColor = vec3( 0.9, 0.6, 0.0 );
	vec3 sunColor = vec3( 1 );
	vec3 directLightColor = sunColor * dot( normal, lightDir );
	vec3 ambientColor = vec3( 0, 0, 0 );
	rayStart = position.xyz;

	// Trace a shadow ray if we hit something
	if ( hitValue.color.a > 0.0 ) {		
		rayDir = lightDir + RandomInUnitSphere( seed ) * 0.025;
		traceNV( topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, rayStart.xyz, tmin, rayDir.xyz, tmax, payload );
		
		// If we hit something, then we're in shadow
		if ( hitValue.color.a > 0.0 ) {
			directLightColor.rgb *= 0.0f;
		}
	}
	
	ambientColor = vec3( 0 );
	int maxBounces = 4;//16;//256;
	for ( int i = 0; i < maxBounces; i++ ) {
		// Now trace a random ray and check if we hit the sky (for ambient light)
		{
			rayStart = position.xyz;
			rayDir = normal;
			rayDir = normalize( RandomInUnitSphere( seed ) );
			if ( dot( rayDir, normal ) < 0.0 ) {
				rayDir *= -1.0;
			}
			traceNV( topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, rayStart.xyz, tmin, rayDir.xyz, tmax, payload );
			if ( hitValue.color.a < 0.0 ) {
				ambientColor += hitValue.color.rgb * 0.5;
			}
		}
		
		// If we hit something solid... then do a shadow trace and use it as single bounce light
		if ( hitValue.color.a > 0.0 ) {
			record_t solid;
			solid.pos = hitValue.pos;
			solid.norm = hitValue.norm;
			solid.color = hitValue.color;
			
			rayStart.xyz = solid.pos.xyz;
			rayDir = lightDir;
			traceNV( topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, rayStart.xyz, tmin, rayDir.xyz, tmax, payload );
			
			// If we hit nothing, then we're lit... so add the solid color to the bounced light
			if ( hitValue.color.a < 0.0 ) {
				ambientColor += dot( solid.norm.xyz, rayDir ) * solid.color.rgb;
			}
		}
	}

	//float ambientLength = length( ambientColor );
	//ambientColor = vec3( ambientLength );
	
	vec4 finalColor = vec4( 1.0, 0.0, 0.0, 1.0 );
	finalColor.rgb = diffuseColor * ( directLightColor + 3.1415 * 0.5 * ambientColor / float( maxBounces ) );	// stores full renderin equation
	//finalColor.rgb = ( directLightColor * 0.5 + ambientColor );	// stores combined direct lighting and global illumination
	//finalColor.rgb = 3.1415 * 0.5 * ambientColor / float( maxBounces );	// stores global illumination only
	//finalColor.rgb = 1.0 * ambientColor / float( maxBounces );	// stores global illumination only

	imageStore( image, ivec2( gl_LaunchIDNV.xy ), finalColor );
	imageStore( imagePos, ivec2( gl_LaunchIDNV.xy ), vec4( position.xyz, 0.0 ) );
	imageStore( imageNorms, ivec2( gl_LaunchIDNV.xy ), vec4( normal.xyz, 0.0 ) );
}

