#version 450


#define WORK_GROUP_SIZE 8
layout ( local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1 ) in;

//layout( binding = 0, rg32f ) uniform readonly image2D sourceTex;
//layout ( binding = 1 ) uniform writeonly image2D destTex;
/*
layout( binding = 0, set = 0, rgba16f ) uniform writeonly image2D imageDest;
layout( binding = 1, set = 0, rgba16f ) uniform readonly image2D imageSource;
layout( binding = 2, set = 0, rgba32f ) uniform readonly image2D imageGBuffer0;
layout( binding = 3, set = 0, rgba16f ) uniform readonly image2D imageGBuffer1;
layout( binding = 4, set = 0, rgba16f ) uniform readonly image2D imageGBuffer2;
*/
layout( binding = 0 ) uniform writeonly image2D imageDest;
layout( binding = 1, rgba16f ) uniform readonly image2D imageSource;
layout( binding = 2, rgba32f ) uniform readonly image2D imageGBuffer0;
layout( binding = 3, rgba16f ) uniform readonly image2D imageGBuffer1;
layout( binding = 4, rgba16f ) uniform readonly image2D imageGBuffer2;

//shared vec2 groupData[ 256 ];

/*
 ==========================
 main
 ==========================
 */
void main() {
	ivec2 st = ivec2( gl_GlobalInvocationID.xy );
	if ( st.x >= 1920 || st.y >= 1080 ) {
		return;
	}

	vec4 gbuffer0 = imageLoad( imageGBuffer0, st );
    vec4 gbuffer1 = imageLoad( imageGBuffer1, st );
    vec4 gbuffer2 = imageLoad( imageGBuffer2, st );

	vec3 worldPos = gbuffer0.xyz;
    vec3 diffuse = gbuffer1.rgb;
    vec3 normal = gbuffer2.xyz;

	float roughness = gbuffer0.a;
    float metalness = gbuffer1.a;

    if ( 0 == gbuffer2.a ) {
		imageStore( imageDest, st, vec4( 1, 0, 1, 1 ) );
		return;
    }

	float n = 0;
	vec3 color = vec3( 0, 1, 0 );
	color = vec3( 0 );
	for ( int y = -2; y <= 2; y++) {
		for ( int x = -2; x <= 2; x++ ) {
			ivec2 st2 = st + ivec2( x, y );
			if ( st2.x >= 1920 || st2.y >= 1080 ) {
				continue;
			}

			vec4 colorSample = imageLoad( imageSource, st2 );
			if ( dot( colorSample.rgb, vec3( 1 ) ) < 0.01 ) {
				continue;
			}

			color += colorSample.rgb;
			n += 1.0;
		}
	}

	if ( n > 0 ) {
		color = color / n;
	}
	imageStore( imageDest, st, vec4( color.r, color.g, color.b, 1 ) );
}


 
 