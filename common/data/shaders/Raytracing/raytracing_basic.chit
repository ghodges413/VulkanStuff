
#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable

layout( binding = 5, set = 0 ) readonly buffer VertexArray { float v[]; } Vertices[];
layout( binding = 6, set = 0 ) readonly buffer IndexArray { uint i[]; } Indices[];
layout( binding = 7, set = 0 ) readonly buffer OrientArray { mat4 Orients[]; };

struct record_t {
	vec4 pos;
	vec4 norm;
	vec4 color;
};
layout( location = 0 ) rayPayloadInNV record_t hitValue;
hitAttributeNV vec3 attribs;

struct vert_t {
  vec3 pos;
  vec3 norm;
  vec2 st;
};


/*
==========================================
UnpackNormal
==========================================
*/
vec3 UnpackNormal( in float n ) {
	uint value = floatBitsToUint( n );
	
	// wwzzyyxx
//	value = 0x000000ff;	// red
//	value = 0x0000ff00;	// green
//	value = 0x00ff0000;	// blue
//	value = 0xff000000;	// alpha (also blue, as is the default)
	
	//unpackUnorm2x16
	//unpackSnorm2x16
	//unpackUnorm4x8
	//unpackSnorm4x8
	vec4 norm = unpackSnorm4x8( value );
	vec3 nn;
	nn = norm.xyz;
	return nn;
}

/*
==========================================
GetVertex
==========================================
*/
vert_t GetVertex( in uint iID, in uint primitiveID ) {
	uint a = Indices[ iID ].i[ 3 * primitiveID + 0 ];
	uint b = Indices[ iID ].i[ 3 * primitiveID + 1 ];
	uint c = Indices[ iID ].i[ 3 * primitiveID + 2 ];
	
	uint stride = 8;
	vec3 v0 = vec3( Vertices[ iID ].v[ stride * a + 0 ], Vertices[ iID ].v[ stride * a + 1 ], Vertices[ iID ].v[ stride * a + 2 ] );
	vec3 v1 = vec3( Vertices[ iID ].v[ stride * b + 0 ], Vertices[ iID ].v[ stride * b + 1 ], Vertices[ iID ].v[ stride * b + 2 ] );
	vec3 v2 = vec3( Vertices[ iID ].v[ stride * c + 0 ], Vertices[ iID ].v[ stride * c + 1 ], Vertices[ iID ].v[ stride * c + 2 ] );
	
	vec3 n0 = vec3( Vertices[ iID ].v[ stride * a + 3 ], Vertices[ iID ].v[ stride * a + 4 ], Vertices[ iID ].v[ stride * a + 5 ] );
	vec3 n1 = vec3( Vertices[ iID ].v[ stride * b + 3 ], Vertices[ iID ].v[ stride * b + 4 ], Vertices[ iID ].v[ stride * b + 5 ] );
	vec3 n2 = vec3( Vertices[ iID ].v[ stride * c + 3 ], Vertices[ iID ].v[ stride * c + 4 ], Vertices[ iID ].v[ stride * c + 5 ] );
	
	vec2 st0 = vec2( Vertices[ iID ].v[ stride * a + 6 ], Vertices[ iID ].v[ stride * a + 7 ] );
	vec2 st1 = vec2( Vertices[ iID ].v[ stride * b + 6 ], Vertices[ iID ].v[ stride * b + 7 ] );
	vec2 st2 = vec2( Vertices[ iID ].v[ stride * c + 6 ], Vertices[ iID ].v[ stride * c + 7 ] );
	
	//vec3 n0 = UnpackNormal( Vertices[ stride * a + 5 ] );
	//vec3 n1 = UnpackNormal( Vertices[ stride * b + 5 ] );
	//vec3 n2 = UnpackNormal( Vertices[ stride * c + 5 ] );
	
	vec3 uvw;
	uvw.x = 1.0 - attribs.x - attribs.y;
	uvw.y = attribs.x;
	uvw.z = attribs.y;
	
	vec3 pos = v0 * uvw.x + v1 * uvw.y + v2 * uvw.z;
	vec3 norm = n0 * uvw.x + n1 * uvw.y + n2 * uvw.z;
	vec2 st = st0 * uvw.x + st1 * uvw.y + st2 * uvw.z;
	
	vert_t vert;
	vert.pos = pos;
	vert.norm = norm;
	vert.st = st;
	return vert;
}

/*
==========================================
GetColorFromPositionAndNormal
==========================================
*/
vec3 GetColorFromPositionAndNormal( in vec3 worldPosition, in vec3 normal ) {
    const float pi = 3.141519;

    vec3 scaledPos = worldPosition.xyz * pi * 2.0;
    vec3 scaledPos2 = worldPosition.xyz * pi * 2.0 / 10.0 + vec3( pi / 4.0 );
    float s = cos( scaledPos2.x ) * cos( scaledPos2.y ) * cos( scaledPos2.z );  // [-1,1] range
    float t = cos( scaledPos.x ) * cos( scaledPos.y ) * cos( scaledPos.z );     // [-1,1] range

    vec3 colorMultiplier = vec3( 0.5, 0.5, 1 );
    if ( abs( normal.x ) > abs( normal.y ) && abs( normal.x ) > abs( normal.z ) ) {
        colorMultiplier = vec3( 1, 0.5, 0.5 );
    } else if ( abs( normal.y ) > abs( normal.x ) && abs( normal.y ) > abs( normal.z ) ) {
        colorMultiplier = vec3( 0.5, 1, 0.5 );
    }

    t = ceil( t * 0.9 );
    s = ( ceil( s * 0.9 ) + 3.0 ) * 0.25;
    vec3 colorB = vec3( 0.85, 0.85, 0.85 );
    vec3 colorA = vec3( 1, 1, 1 );
    vec3 finalColor = mix( colorA, colorB, t ) * s;

    return colorMultiplier * finalColor;
}

/*
==========================================
main
==========================================
*/
void main() {
	//gl_WorldRayOriginNV,
	//gl_WorldRayDirectionNV,
	//gl_ObjectRayOriginNV,
	//gl_ObjectRayDirectionNV
	
	//gl_RayTminNV
	//gl_RayTmaxNV = gl_HitTNV
	
	//gl_ObjectToWorldNV	// matrix for the current instance
	//gl_WorldToObjectNV	// matrix for the current instance
	
	int offset = 4;	// this is to account for the camera and shadow projection matrices
	mat4 orient = Orients[ 4 + gl_InstanceID ];
	
	vec3 pos;
	pos = gl_WorldRayOriginNV + gl_RayTmaxNV * gl_WorldRayDirectionNV;
	pos = gl_ObjectRayOriginNV + gl_RayTmaxNV * gl_ObjectRayDirectionNV;
	hitValue.pos.xyz = pos;
	
	//gl_InstanceID		// The index of the model instance we hit
	//gl_PrimitiveID	// The index of the triangle in the model we hit
	vert_t vert = GetVertex( gl_InstanceID, gl_PrimitiveID );
	hitValue.pos = orient * vec4( vert.pos, 1.0 );
	hitValue.norm = orient * vec4( vert.norm, 0.0 );
	
	vec3 color = GetColorFromPositionAndNormal( vert.pos, vert.norm );
	hitValue.color = vec4( color, 1.0 );
}



