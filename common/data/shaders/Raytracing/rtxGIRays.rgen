#version 460
#extension GL_NV_ray_tracing : require

layout( binding = 0, set = 0 ) uniform accelerationStructureNV topLevelAS;

layout( binding = 1, set = 0, rgba16f ) uniform writeonly image2D imageSHRed;
layout( binding = 2, set = 0, rgba16f ) uniform writeonly image2D imageSHGreen;
layout( binding = 3, set = 0, rgba16f ) uniform writeonly image2D imageSHBlue;

layout( binding = 4, set = 0, rgba32f ) uniform readonly image2D imageGBuffer0;
layout( binding = 5, set = 0, rgba16f ) uniform readonly image2D imageGBuffer1;
layout( binding = 6, set = 0, rgba16f ) uniform readonly image2D imageGBuffer2;

//#define MAX_LIGHTS 128
//#define MAX_LIGHTS 32
#define MAX_LIGHTS 4

struct pointLight_t {
	vec4 mSphere;	// xyz = position, w = radius, these are in world space coordinates
	vec4 mColor;	// rgb = color, a = intensity
};
layout( std430, binding = 7 ) buffer bufferLights {
	pointLight_t pointLights[];
};

struct reservoir_t {
	vec3 start;
	int lightIdx;

	vec3 end;
	float weightSum;
};
layout( std430, binding = 8 ) buffer sampleReservoir {
	reservoir_t reservoir[];
};

/*
layout( binding = 4, set = 0 ) uniform CameraProperties
{
	mat4 view;
	mat4 proj;
} cam;
*/

layout( push_constant ) uniform frameCount {
	uint count;
} PushConstant;

struct record_t {
	vec4 pos;
	vec4 norm;
	vec4 color;
};
layout( location = 0 ) rayPayloadNV record_t hitValue;


uint wang_hash( uint seed ) {
    seed = ( seed ^ 61 ) ^ ( seed >> 16 );
    seed *= 9;
    seed = seed ^ ( seed >> 4 );
    seed *= 0x27d4eb2d;
    seed = seed ^ ( seed >> 15 );
    return seed;
}


// Generates a seed for a random number generator from 2 inputs plus a backoff
// https://github.com/nvpro-samples/optix_prime_baking/blob/master/random.h
// https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm
uint InitRandomSeed( uint val0, uint val1 ) {
	uint v0 = val0, v1 = val1, s0 = 0;

	for (uint n = 0; n < 16; n++) {
		s0 += 0x9e3779b9;
		v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
		v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
	}

	return v0;
}

uint RandomInt( inout uint seed ) {
	// LCG values from Numerical Recipes
    return (seed = 1664525 * seed + 1013904223);
}

float RandomFloat( inout uint seed ) {
	// Float version using bitmask from Numerical Recipes
	const uint one = 0x3f800000;
	const uint msk = 0x007fffff;
	return uintBitsToFloat( one | ( msk & ( RandomInt( seed ) >> 9 ) ) ) - 1;
}

vec2 RandomInUnitDisk( inout uint seed ) {
	for (;;) {
		const vec2 p = 2 * vec2( RandomFloat( seed ), RandomFloat( seed ) ) - 1;
		if ( dot( p, p ) < 1 ) {
			return p;
		}
	}
}

vec3 RandomInUnitSphere( inout uint seed ) {
	for (;;) {
		const vec3 p = 2 * vec3( RandomFloat( seed ), RandomFloat( seed ), RandomFloat( seed ) ) - 1;
		if ( dot( p, p ) < 1 && dot( p, p ) > 0.00001 ) {
			return p;
		}
	}
}

vec3 RandomInUnitHalfSphere( inout uint seed, in vec3 normal ) {
	for (;;) {
		vec3 ray = RandomInUnitSphere( seed );
		if ( dot( ray, normal ) > 0.01 ) {
			return ray;
		}
	}
}

/*
==========================================
AddSample
==========================================
*/
reservoir_t AddSample( in reservoir_t douche, inout uint seed ) {
	//reservoir_t sample;
	reservoir_t newSample = douche;
	float w = douche.weightSum;

	// TODO: group the reservoirs in squares so that this is cache friendlier
	uint reservoirIdx = gl_LaunchIDNV.y * 1920 + gl_LaunchIDNV.x;
	reservoir_t oldSample = reservoir[ reservoirIdx ];

	//float weight = oldSample.weightSum + w;
	reservoir[ reservoirIdx ].weightSum += w;
	float weight = reservoir[ reservoirIdx ].weightSum;

	if ( RandomFloat( seed ) < ( w / weight ) ) {
		newSample.weightSum = weight;
		reservoir[ reservoirIdx ] = newSample;
		return newSample;
	}

	return oldSample;
}

/*
==========================================
GenerateSample
==========================================
*/
reservoir_t GenerateSample( in vec3 x0, inout uint seed, in vec3 normal ) {
	// TODO: group the reservoirs in squares so that this is cache friendlier
	uint reservoirIdx = gl_LaunchIDNV.y * 1920 + gl_LaunchIDNV.x;
	reservoir[ reservoirIdx ].weightSum = 0;

	reservoir_t douche;
	douche.start = x0;
	for ( int i = 0; i < MAX_LIGHTS; i++ ) {
		pointLight_t light = pointLights[ i ];
		douche.end = light.mSphere.xyz;
		douche.lightIdx = i;
		//float w = ??
		vec3 dir = douche.end - douche.start;
		float dirLength = length( dir );
		dir = normalize( dir );
		float dotdot = max( 0.0, dot( normal, dir ) );
		float dot2 = dotdot * dotdot;
		//float w = ( 1.0 / 128.0 ) * light.mSphere.w / length( douche.start - douche.end );
		float w = ( 1.0 / float( MAX_LIGHTS ) ) * light.mSphere.w * dot2 * dot2 / ( dirLength * dirLength );
		douche.weightSum = w;
		AddSample( douche, seed );

		seed = wang_hash( seed + PushConstant.count );
	}

	return reservoir[ reservoirIdx ];
}

/*
==========================================
main
==========================================
*/
void main() {
	vec4 gbuffer0 = imageLoad( imageGBuffer0, ivec2( gl_LaunchIDNV.xy ) );
    vec4 gbuffer1 = imageLoad( imageGBuffer1, ivec2( gl_LaunchIDNV.xy ) );
    vec4 gbuffer2 = imageLoad( imageGBuffer2, ivec2( gl_LaunchIDNV.xy ) );

	vec3 worldPos = gbuffer0.xyz;
    vec3 diffuse = gbuffer1.rgb;
    vec3 normal = gbuffer2.xyz;

	float roughness = gbuffer0.a;
    float metalness = gbuffer1.a;

    if ( 0 == gbuffer2.a ) {
		imageStore( imageSHRed, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		imageStore( imageSHGreen, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		imageStore( imageSHBlue, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		return;
    }

	//
	//	Generate Sample and fire randomly into the geo
	//
    uint seed = InitRandomSeed( gl_LaunchIDNV.x, gl_LaunchIDNV.y );
	seed = wang_hash( seed + PushConstant.count );

	// Trace a random ray
	{
		vec3 rayStart = worldPos;
		vec3 rayDir = RandomInUnitHalfSphere( seed, normal );
		uint rayFlags = gl_RayFlagsOpaqueNV;
		uint cullMask = 0xff;
		uint sbtRecordOffset = 0;
		uint sbtRecordStride = 0;
		uint missIndex = 0;
		float tmin = 0.0125;
		float tmax = 1000.0;
		const int payload = 0;	

		traceNV( topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, rayStart.xyz, tmin, rayDir.xyz, tmax, payload );
	}

	// If this ray didn't hit anything, then there's no bounced GI contribution
	if ( hitValue.color.a < 0 ) {
		imageStore( imageSHRed, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		imageStore( imageSHGreen, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		imageStore( imageSHBlue, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		return;
	}


	//
	//	Trace the bounced lighting
	//
	record_t record0 = hitValue;
	reservoir_t douche = GenerateSample( hitValue.pos.xyz, seed, hitValue.norm.xyz );

	uint lightIdx = seed % MAX_LIGHTS;
	lightIdx = uint( douche.lightIdx );
	pointLight_t light = pointLights[ lightIdx ];
	{
		float dist = length( light.mSphere.xyz - record0.pos.xyz );

		vec3 rayStart = record0.pos.xyz;
		vec3 rayDir = normalize( light.mSphere.xyz - record0.pos.xyz );
		uint rayFlags = gl_RayFlagsOpaqueNV;
		uint cullMask = 0xff;
		uint sbtRecordOffset = 0;
		uint sbtRecordStride = 0;
		uint missIndex = 0;
		float tmin = 0.0125;
		float tmax = dist;//1000.0;
		const int payload = 0;	

		traceNV( topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, rayStart.xyz, tmin, rayDir.xyz, tmax, payload );
	}

	// If we hit something, then the light is occluded (the sample is shadowed)
	if ( hitValue.color.a >= 0 ) {
		imageStore( imageSHRed, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		imageStore( imageSHGreen, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		imageStore( imageSHBlue, ivec2( gl_LaunchIDNV.xy ), vec4( 0 ) );
		return;
	}

	// Calculate the distance to the bounced light, 
	// Calcualte the correct lighting for the sample
	// Convert the lighting into Spherical Harmonic components
	float dist = length( light.mSphere.xyz - record0.pos.xyz );
	dist += length( worldPos - record0.pos.xyz );

	vec3 rayDir = normalize( light.mSphere.xyz - record0.pos.xyz );
	float dotdot = dot( rayDir, record0.norm.xyz );

	// TODO: use the hit record color to modify the light color
	// (we're skipping this now, because we are not currently storing
	// diffuse color in the triangle vertices)
	vec3 color = record0.color.rgb * light.mColor.rgb * light.mColor.w;
	color = light.mColor.rgb * light.mColor.w;

	vec3 lighting = dotdot * color / dist;
	//lighting = record0.color.rgb;

	// Now that we have the lighting information, store it in SH components to preserve its direction
	vec3 dir = normalize( record0.pos.xyz - worldPos );
	float azimuth = sqrt( 1.0f - dir[ 2 ] * dir[ 2 ] );
	const float pi = 3.1415926;
	float dA = 4.0f * pi;// / (float)numSamples;		// dividing by the number of samples will be done in the accumulator shader

	vec4 shRed;
	vec4 shGreen;
	vec4 shBlue;

	float elementRed = lighting.r * azimuth * dA;
	shRed[ 0 ] = 0.282095 * elementRed;				// l00
	shRed[ 1 ] = 0.488603 * dir[ 0 ] * elementRed;	// l11
	shRed[ 2 ] = 0.488603 * dir[ 2 ] * elementRed;	// l10
	shRed[ 3 ] = 0.488603 * dir[ 1 ] * elementRed;	// l1n1

	float elementGreen = lighting.g * azimuth * dA;
	shGreen[ 0 ] = 0.282095 * elementGreen;				// l00
	shGreen[ 1 ] = 0.488603 * dir[ 0 ] * elementGreen;	// l11
	shGreen[ 2 ] = 0.488603 * dir[ 2 ] * elementGreen;	// l10
	shGreen[ 3 ] = 0.488603 * dir[ 1 ] * elementGreen;	// l1n1

	float elementBlue = lighting.b * azimuth * dA;
	shBlue[ 0 ] = 0.282095 * elementBlue;				// l00
	shBlue[ 1 ] = 0.488603 * dir[ 0 ] * elementBlue;	// l11
	shBlue[ 2 ] = 0.488603 * dir[ 2 ] * elementBlue;	// l10
	shBlue[ 3 ] = 0.488603 * dir[ 1 ] * elementBlue;	// l1n1

	imageStore( imageSHRed, ivec2( gl_LaunchIDNV.xy ), shRed );
	imageStore( imageSHGreen, ivec2( gl_LaunchIDNV.xy ), shGreen );
	imageStore( imageSHBlue, ivec2( gl_LaunchIDNV.xy ), shBlue );
}

