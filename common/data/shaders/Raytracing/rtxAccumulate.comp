#version 450

layout( binding = 0, rgba8 ) uniform image2D dstTex;
layout( binding = 1, rgba8 ) uniform readonly image2D srcTex;

layout( binding = 2, rgba16f ) uniform image2D dstTexPos;
layout( binding = 3, rgba16f ) uniform readonly image2D srcTexPos;

layout( binding = 4, rgba16f ) uniform image2D dstTexNorms;
layout( binding = 5, rgba16f ) uniform readonly image2D srcTexNorms;

layout( push_constant ) uniform frameCount {
	mat4 matViewPrev;
	mat4 matView;
	mat4 matProj;
	uint count;
	uint width;
	uint height;
} PushConstant;

layout ( local_size_x = 16, local_size_y = 16 ) in;

//in uvec3 gl_NumWorkGroups;
//in uvec3 gl_WorkGroupID;
//in uvec3 gl_LocalInvocationID;
//in uvec3 gl_GlobalInvocationID;
//in uint  gl_LocalInvocationIndex;


uint wang_hash( uint seed )
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

float wang_rnd01( uint seed ) {
	uint maxint=0;
	maxint--; // not ok but works
	uint rndint = wang_hash( seed );
	
	float value = float( rndint ) / float( maxint );
	return value;
}

// Generates a seed for a random number generator from 2 inputs plus a backoff
// https://github.com/nvpro-samples/optix_prime_baking/blob/master/random.h
// https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm
uint InitRandomSeed(uint val0, uint val1)
{
	uint v0 = val0, v1 = val1, s0 = 0;

	//[[unroll]] 
	for (uint n = 0; n < 16; n++)
	{
		s0 += 0x9e3779b9;
		v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
		v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
	}

	return v0;
}

uint RandomInt(inout uint seed)
{
	// LCG values from Numerical Recipes
    return (seed = 1664525 * seed + 1013904223);
}

float RandomFloat(inout uint seed)
{
	// Float version using bitmask from Numerical Recipes
	const uint one = 0x3f800000;
	const uint msk = 0x007fffff;
	return uintBitsToFloat(one | (msk & (RandomInt(seed) >> 9))) - 1;
}

float RandomFloat01(inout uint seed)
{
	for (;;)
	{
		float p = RandomFloat( seed );
		
		if ( p >= 0.0 && p <= 1.0 )
		{
			return p;
		}
	}
}

/*
float wang_rnd(__global unsigned int * rnd_buffer,int id)                
 {
     uint maxint=0;
     maxint--; // not ok but works
     uint rndint=wang_hash(rnd_buffer[id]);
     rnd_buffer[id]=rndint;
     return ((float)rndint)/(float)maxint;
 }
*/

/*
==========================
Accumulate
==========================
*/
vec4 Accumulate( in ivec2 st, in vec4 pos, in vec4 norm, out uint count_out ) {
	vec4 value = imageLoad( srcTex, st );
	vec4 value_old = imageLoad( dstTex, st );
	
	vec4 pos_old = imageLoad( dstTexPos, st );
	float count = pos_old.w;
	
	vec4 norm_old = imageLoad( dstTexNorms, st );
	
	if ( 0 == PushConstant.count ) {
		count = 0.0;
	}
	
	/*
	float weightPos = 1.0;
	vec3 deltaPos = pos_old.xyz - pos.xyz;
	if ( dot( deltaPos, deltaPos ) > 0.1 ) {
		weightPos = 0.0;
		count = 0.0;
	}
	
	float weightNormal = max( 0.0, dot( norm.xyz, norm_old.xyz ) );
	if ( weightNormal <= 0.0 ) {
		count = 0.0;
	}
	*/
	
	vec4 final = value_old * count + value;	
	final *= 1.0 / ( count + 1.0 );
	
	count_out = uint( count + 1 );
	
	return final;
}

float size = 1.5;
float width = 1920 * size;
float height = 1080 * size + 8;

/*
==========================
main
==========================
*/
void main() {
	ivec2 storePos = ivec2( gl_GlobalInvocationID.xy );
	//uint seed = InitRandomSeed( storePos.x, storePos.y );
	if ( storePos.x >= width ) {
		return;
	}
	if ( storePos.y >= height ) {
		return;
	}

	width = float( PushConstant.width );
	height = float( PushConstant.height );
	float count = float( PushConstant.count );

	vec4 value_old	= imageLoad( dstTex, storePos );
	vec4 value		= imageLoad( srcTex, storePos );

	vec4 final = value_old * count + value;	
	final *= 1.0 / ( count + 1.0 );
	//final.xyz = projectedPos.xyz;
	//final.z = 0.0;
	//final.xy = vec2( oldSTi ) / 512.0;
	
	imageStore( dstTex, storePos, final );
	/*
	vec4 value = imageLoad( srcTex, storePos );
	vec4 pos = imageLoad( srcTexPos, storePos );
	vec4 norm = imageLoad( srcTexNorms, storePos );

	// The position is a world space coordinate
	// Use the current position, and the old camera information to get the old st position
	pos.w = 1.0;
	vec4 viewSpacePos = PushConstant.matViewPrev * pos;
	vec4 projectedPos = PushConstant.matProj * viewSpacePos;
	projectedPos /= projectedPos.w;
	
	vec2 oldST = projectedPos.xy;
	oldST.y *= -1.0;
	oldST *= 0.5;
	oldST += vec2( 0.5 );
	//ivec2 oldSTi = ivec2( oldST * 512.0 );
	ivec2 oldSTi = ivec2( oldST.x * width, oldST.y * height );
	//oldSTi = storePos;	
	
	vec4 value_old = imageLoad( dstTex, oldSTi );
	vec4 pos_old = imageLoad( dstTexPos, oldSTi );
//	float count = pos_old.w;
	float count = float( PushConstant.count );
	count = 1.0;
	vec4 norm_old = imageLoad( dstTexNorms, oldSTi );
	
	vec3 deltaPos = pos_old.xyz - pos.xyz;
	float distThreshold = 0.01;
	if ( dot( deltaPos, deltaPos ) > distThreshold * distThreshold ) {
//		count = 0.0;
	}
	
	seed += uint( count );
	float rndNumber = RandomFloat01( seed );
	//float rndNumber = wang_rnd01( uint( count ) + storePos.x + storePos.y );
//	float maxCount = mix( 32.0, 64.0, rndNumber );
//	if ( 0 == PushConstant.count || count > maxCount ) {//rndNumber < 0.5 || count > 32.0 ) {
//		count = 0.0;
//	}
//	if ( count > maxCount ) {//rndNumber < 0.5 || count > 32.0 ) {
//		count = 0.0;
//	}
	/*
	if ( 0 == PushConstant.count || count > 32.0 ) {
		count = 0.0;
	}
	*
	vec4 final = value_old * count + value;	
	final *= 1.0 / ( count + 1.0 );
	//final.xyz = projectedPos.xyz;
	//final.z = 0.0;
	//final.xy = vec2( oldSTi ) / 512.0;
	
	imageStore( dstTex, storePos, final );
	imageStore( dstTexPos, storePos, vec4( pos.xyz, count + 1.0 ) );
	imageStore( dstTexNorms, storePos, norm );
	*/
}

