#version 450

#define WORK_GROUP_SIZE 8
layout ( local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1 ) in;

layout( binding = 0, rgba16f ) uniform image2D imageDest; // The denoised light buffer and our output buffer

layout( binding = 1, rgba32f ) uniform readonly image2D imageGBuffer0;
layout( binding = 2, rgba16f ) uniform readonly image2D imageGBuffer1;
layout( binding = 3, rgba16f ) uniform readonly image2D imageGBuffer2;

layout( binding = 4, rgba16f ) uniform readonly image2D imageSHRed;
layout( binding = 5, rgba16f ) uniform readonly image2D imageSHGreen;
layout( binding = 6, rgba16f ) uniform readonly image2D imageSHBlue;


vec3 ColorFromSH( in vec4 shRed, in vec4 shGreen, in vec4 shBlue, in vec3 dir ) {
	const float c1 = 0.429043;
    const float c2 = 0.511664;
    const float c3 = 0.743125;
    const float c4 = 0.886227;
    const float c5 = 0.247708;

	// Convert to spherical harmonic components
    vec3 ylm00 = vec3( shRed.x, shGreen.x, shBlue.x );
    vec3 ylm11 = vec3( shRed.y, shGreen.y, shBlue.y );
    vec3 ylm10 = vec3( shRed.z, shGreen.z, shBlue.z );
    vec3 ylm1n1 = vec3( shRed.w, shGreen.w, shBlue.w );

    vec3 color = ylm00 * c4 + ( ylm11 * dir.x + ylm1n1 * dir.y + ylm10 * dir.z ) * 2.0 * c2;
    return color;
}

/*
 ==========================
 main
 ==========================
 */
void main() {
	ivec2 st = ivec2( gl_GlobalInvocationID.xy );
	if ( st.x >= 1920 || st.y >= 1080 ) {
		return;
	}

	vec4 gbuffer0 = imageLoad( imageGBuffer0, st );
    vec4 gbuffer1 = imageLoad( imageGBuffer1, st );
    vec4 gbuffer2 = imageLoad( imageGBuffer2, st );

	vec3 worldPos = gbuffer0.xyz;
    vec3 diffuse = gbuffer1.rgb;
    vec3 normal = gbuffer2.xyz;

	float roughness = gbuffer0.a;
    float metalness = gbuffer1.a;

    if ( 0 == gbuffer2.a ) {
		imageStore( imageDest, st, vec4( 1, 0, 1, 1 ) );
		return;
    }

	// Calculate the global illumination (bounced light)
	vec4 shRed = imageLoad( imageSHRed, st );
	vec4 shGreen = imageLoad( imageSHGreen, st );
	vec4 shBlue = imageLoad( imageSHBlue, st );
	vec3 bouncedLight = ColorFromSH( shRed, shGreen, shBlue, normal );
	vec3 debugBounced = vec3( 0.0, bouncedLight.g, 0.0 );

	vec3 lighting = imageLoad( imageDest, st ).rgb;
	vec3 debugLight = vec3( lighting.r, 0.0, 0.0 );
	lighting += bouncedLight;

	vec3 finalColor = lighting * diffuse;
	//finalColor = debugLight + debugBounced;
	//finalColor = bouncedLight;
	imageStore( imageDest, st, vec4( finalColor, 1.0 ) );
}